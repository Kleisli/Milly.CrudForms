prototype(Milly.Crudforms:Component.ObjectValues.IndexRow) < prototype(Neos.Fusion:Component) {

    properties = ${Milly.CrudForms.getConfigurationByModel(object, 'properties', 'index')}

        renderer = Neos.Fusion:Loop {
            items = ${props.properties}
            itemKey = "propertyName"
            itemName = "propertyConfig"

            itemRenderer = Neos.Fusion:Case {
                textarea {
                    condition = ${propertyConfig.type == 'textarea'}
                    renderer = afx`
                        <td>
                            {Object.get(props.object, propertyName)}
                        </td>
                    `
                }
                        number {
                    condition = ${propertyConfig.type == 'number'}
                    renderer = afx`
                        <td>
                            {Object.get(props.object, propertyName)}
                        </td>
                    `
                }
                multiValue {
                    condition = ${propertyConfig.type == 'select' ||  propertyConfig.type == 'booleanRadio'}
                    renderer = afx`
                            <td>
                                    {Milly.CrudForms.getFieldOptionsObjectLabel(propertyConfig.options, Object.get(object, propertyName))}
                            </td>
                    `
                }
                booleanCheckbox {
                    condition = ${ propertyConfig.type == 'booleanCheckbox'}
                    renderer = afx`
                            <td>
                                {Object.get(object, propertyName) ? 'Ja' : 'Nein'}
                            </td>
                    `
                }
                dateTime {
                    condition = ${ propertyConfig.type == 'dateTime'}
                    renderer = afx`
                            <td>
                                {Date.format(Object.get(object, propertyName), "d.m.Y H:i")}
                            </td>
                    `
                }
                date {
                    condition = ${ propertyConfig.type == 'date'}
                    renderer = afx`
                            <td>
                                {Date.format(Object.get(object, propertyName), "d.m.Y")}
                            </td>
                    `
                }
                default {
                    @position = 'end'
                    condition = true
                    renderer = afx`
                        <td>
                            {Object.get(props.object, propertyName)}
                        </td>
                    `
                }
            }
        }


}
